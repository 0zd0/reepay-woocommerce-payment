!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("jquery"));else if("function"==typeof define&&define.amd)define(["jquery"],t);else{var i="object"==typeof exports?t(require("jquery")):t(e.jQuery);for(var n in i)("object"==typeof exports?exports:e)[n]=i[n]}}(window,function(__WEBPACK_EXTERNAL_MODULE__3__){return modules=[function(e){e.exports=JSON.parse('{"BACKSPACE":8,"BACKSPACE_SAFARI":127,"DELETE":46,"DOWN":40,"END":35,"ENTER":13,"ESCAPE":27,"HOME":36,"INSERT":45,"LEFT":37,"PAGE_DOWN":34,"PAGE_UP":33,"RIGHT":39,"SPACE":32,"TAB":9,"UP":38,"X":88,"CONTROL":17}')},function(e,t,i){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=i(2),r=i(4),o=r.document,s=i(5).generateMaskSet,u=i(5).analyseMask,l=i(8);function c(e,t,i){if(!(this instanceof c))return new c(e,t,i);this.el=void 0,this.events={},this.maskset=void 0,this.refreshValue=!1,!0!==i&&(a.isPlainObject(e)?t=e:(t=t||{},e&&(t.alias=e)),this.opts=a.extend(!0,{},this.defaults,t),this.noMasksCache=t&&void 0!==t.definitions,this.userOptions=t||{},p(this.opts.alias,t,this.opts),this.isRTL=this.opts.numericInput)}function p(e,t,i){var n=c.prototype.aliases[e];return n?(n.alias&&p(n.alias,void 0,i),a.extend(!0,i,n),a.extend(!0,i,t),!0):(null===i.mask&&(i.mask=e),!1)}c.prototype={dataAttribute:"data-inputmask",defaults:{_maxTestPos:500,placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:a.noop,onincomplete:a.noop,oncleared:a.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,insertModeVisual:!0,clearIncomplete:!1,alias:null,onKeyDown:a.noop,onBeforeMask:null,onBeforePaste:function(e,t){return a.isFunction(t.onBeforeMask)?t.onBeforeMask.call(this,e,t):e},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:a.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"text",importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(e){var t=this;return"string"==typeof e&&(e=o.getElementById(e)||o.querySelectorAll(e)),e=e.nodeName?[e]:e,a.each(e,function(e,i){var n=a.extend(!0,{},t.opts);if(function(e,t,i,n){function o(t,a){null!==(a=void 0!==a?a:e.getAttribute(n+"-"+t))&&("string"==typeof a&&(0===t.indexOf("on")?a=r[a]:"false"===a?a=!1:"true"===a&&(a=!0)),i[t]=a)}if(!0===t.importDataAttributes){var s,u,l,c,f=e.getAttribute(n);if(f&&""!==f&&(f=f.replace(/'/g,'"'),u=JSON.parse("{"+f+"}")),u)for(c in l=void 0,u)if("alias"===c.toLowerCase()){l=u[c];break}for(s in o("alias",l),i.alias&&p(i.alias,i,t),t){if(u)for(c in l=void 0,u)if(c.toLowerCase()===s.toLowerCase()){l=u[c];break}o(s,l)}}return a.extend(!0,t,i),"rtl"!==e.dir&&!t.rightAlign||(e.style.textAlign="right"),"rtl"!==e.dir&&!t.numericInput||(e.dir="ltr",e.removeAttribute("dir"),t.isRTL=!0),Object.keys(i).length}(i,n,a.extend(!0,{},t.userOptions),t.dataAttribute)){var o=s(n,t.noMasksCache);void 0!==o&&(void 0!==i.inputmask&&(i.inputmask.opts.autoUnmask=!0,i.inputmask.remove()),i.inputmask=new c(void 0,void 0,!0),i.inputmask.opts=n,i.inputmask.noMasksCache=t.noMasksCache,i.inputmask.userOptions=a.extend(!0,{},t.userOptions),i.inputmask.isRTL=n.isRTL||n.numericInput,i.inputmask.el=i,i.inputmask.maskset=o,a.data(i,"_inputmask_opts",n),l.call(i.inputmask,{action:"mask"}))}}),e&&e[0]&&e[0].inputmask||this},option:function(e,t){return"string"==typeof e?this.opts[e]:"object"===n(e)?(a.extend(this.userOptions,e),this.el&&!0!==t&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return l.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"format",value:e,metadata:t})},setValue:function(e){this.el&&a(this.el).trigger("setvalue",[e])},analyseMask:u},c.extendDefaults=function(e){a.extend(!0,c.prototype.defaults,e)},c.extendDefinitions=function(e){a.extend(!0,c.prototype.definitions,e)},c.extendAliases=function(e){a.extend(!0,c.prototype.aliases,e)},c.format=function(e,t,i){return c(t).format(e,i)},c.unmask=function(e,t){return c(t).unmaskedvalue(e)},c.isValid=function(e,t){return c(t).isValid(e)},c.remove=function(e){"string"==typeof e&&(e=o.getElementById(e)||o.querySelectorAll(e)),e=e.nodeName?[e]:e,a.each(e,function(e,t){t.inputmask&&t.inputmask.remove()})},c.setValue=function(e,t){"string"==typeof e&&(e=o.getElementById(e)||o.querySelectorAll(e)),e=e.nodeName?[e]:e,a.each(e,function(e,i){i.inputmask?i.inputmask.setValue(t):a(i).trigger("setvalue",[t])})};var f=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim");c.escapeRegex=function(e){return e.replace(f,"\\$1")},c.dependencyLib=a,r.Inputmask=c,e.exports=c},function(e,t,i){"use strict";var n=i(3);if(void 0===n)throw"jQuery not loaded!";e.exports=n},function(e,t){e.exports=__WEBPACK_EXTERNAL_MODULE__3__},function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t,i){"use strict";var n=i(2);e.exports={generateMaskSet:function(e,t){function i(e,i,a){var r,o,s=!1;if(null!==e&&""!==e||(e=(s=null!==a.regex)?(e=a.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,".*")),1===e.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),0<a.repeat||"*"===a.repeat||"+"===a.repeat){var u="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;e=a.groupmarker[0]+e+a.groupmarker[1]+a.quantifiermarker[0]+u+","+a.repeat+a.quantifiermarker[1]}return o=s?"regex_"+a.regex:a.numericInput?e.split("").reverse().join(""):e,!1!==a.keepStatic&&(o="ks_"+o),void 0===Inputmask.prototype.masksCache[o]||!0===t?(r={mask:e,maskToken:Inputmask.prototype.analyseMask(e,s,a),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},excludes:{},metadata:i,maskLength:void 0,jitOffset:{}},!0!==t&&(Inputmask.prototype.masksCache[o]=r,r=n.extend(!0,{},Inputmask.prototype.masksCache[o]))):r=n.extend(!0,{},Inputmask.prototype.masksCache[o]),r}if(n.isFunction(e.mask)&&(e.mask=e.mask(e)),n.isArray(e.mask)){if(1<e.mask.length){null===e.keepStatic&&(e.keepStatic=!0);var a=e.groupmarker[0];return n.each(e.isRTL?e.mask.reverse():e.mask,function(t,i){1<a.length&&(a+=e.groupmarker[1]+e.alternatormarker+e.groupmarker[0]),void 0===i.mask||n.isFunction(i.mask)?a+=i:a+=i.mask}),i(a+=e.groupmarker[1],e.mask,e)}e.mask=e.mask.pop()}return null===e.keepStatic&&(e.keepStatic=!1),e.mask&&void 0!==e.mask.mask&&!n.isFunction(e.mask.mask)?i(e.mask.mask,e.mask,e):i(e.mask,e.mask,e)},analyseMask:function(e,t,i){var a,r,o,s,u,l,c=/(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,p=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,f=!1,d=new g,m=[],h=[],v=!1;function g(e,t,i,n){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=i||!1,this.isAlternator=n||!1,this.quantifier={min:1,max:1}}function k(e,a,r){r=void 0!==r?r:e.matches.length;var o=e.matches[r-1];if(t)0===a.indexOf("[")||f&&/\\d|\\s|\\w]/i.test(a)||"."===a?e.matches.splice(r++,0,{fn:new RegExp(a,i.casing?"i":""),static:!1,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==a,casing:null,def:a,placeholder:void 0,nativeDef:a}):(f&&(a=a[a.length-1]),n.each(a.split(""),function(t,n){o=e.matches[r-1],e.matches.splice(r++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||n)?new RegExp("["+(i.staticDefinitionSymbol||n)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==n&&!0!==o.static,casing:null,def:i.staticDefinitionSymbol||n,placeholder:void 0!==i.staticDefinitionSymbol?n:void 0,nativeDef:(f?"'":"")+n})})),f=!1;else{var s=(i.definitions?i.definitions[a]:void 0)||Inputmask.prototype.definitions[a];s&&!f?e.matches.splice(r++,0,{fn:s.validator?"string"==typeof s.validator?new RegExp(s.validator,i.casing?"i":""):new function(){this.test=s.validator}:new RegExp("."),static:s.static||!1,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==(s.definitionSymbol||a),casing:s.casing,def:s.definitionSymbol||a,placeholder:s.placeholder,nativeDef:a,generated:s.generated}):(e.matches.splice(r++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||a)?new RegExp("["+(i.staticDefinitionSymbol||a)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==a&&!0!==o.static,casing:null,def:i.staticDefinitionSymbol||a,placeholder:void 0!==i.staticDefinitionSymbol?a:void 0,nativeDef:(f?"'":"")+a}),f=!1)}}function y(){if(0<m.length){if(k(s=m[m.length-1],r),s.isAlternator){u=m.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup&&(u.matches[e].isGroup=!1);0<m.length?(s=m[m.length-1]).matches.push(u):d.matches.push(u)}}else k(d,r)}function b(e){var t=new g(!0);return t.openGroup=!1,t.matches=e,t}function x(){if((o=m.pop()).openGroup=!1,void 0!==o)if(0<m.length){if((s=m[m.length-1]).matches.push(o),s.isAlternator){u=m.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup=!1,u.matches[e].alternatorGroup=!1;0<m.length?(s=m[m.length-1]).matches.push(u):d.matches.push(u)}}else d.matches.push(o);else y()}function _(e){var t=e.pop();return t.isQuantifier&&(t=b([e.pop(),t])),t}for(t&&(i.optionalmarker[0]=void 0,i.optionalmarker[1]=void 0);a=t?p.exec(e):c.exec(e);){if(r=a[0],t)switch(r.charAt(0)){case"?":r="{0,1}";break;case"+":case"*":r="{"+r+"}";break;case"|":if(0===m.length){var S=b(d.matches);S.openGroup=!0,m.push(S),d.matches=[],v=!0}}if(f)y();else switch(r.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case i.escapeChar:f=!0,t&&y();break;case i.optionalmarker[1]:case i.groupmarker[1]:x();break;case i.optionalmarker[0]:m.push(new g(!1,!0));break;case i.groupmarker[0]:m.push(new g(!0));break;case i.quantifiermarker[0]:var P=new g(!1,!1,!0),w=(r=r.replace(/[{}]/g,"")).split("|"),E=w[0].split(","),M=isNaN(E[0])?E[0]:parseInt(E[0]),A=1===E.length?M:isNaN(E[1])?E[1]:parseInt(E[1]);"*"!==M&&"+"!==M||(M="*"===A?0:1),P.quantifier={min:M,max:A,jit:w[1]};var O=0<m.length?m[m.length-1].matches:d.matches;if((a=O.pop()).isAlternator){O.push(a),O=a.matches;var D=new g(!0),C=O.pop();O.push(D),O=D.matches,a=C}a.isGroup||(a=b([a])),O.push(a),O.push(P);break;case i.alternatormarker:if(0<m.length){var j=(s=m[m.length-1]).matches[s.matches.length-1];l=s.openGroup&&(void 0===j.matches||!1===j.isGroup&&!1===j.isAlternator)?m.pop():_(s.matches)}else l=_(d.matches);if(l.isAlternator)m.push(l);else if(l.alternatorGroup?(u=m.pop(),l.alternatorGroup=!1):u=new g(!1,!1,!1,!0),u.matches.push(l),m.push(u),l.openGroup){l.openGroup=!1;var F=new g(!0);F.alternatorGroup=!0,m.push(F)}break;default:y()}}for(v&&x();0<m.length;)o=m.pop(),d.matches.push(o);return 0<d.matches.length&&(function e(a){a&&a.matches&&n.each(a.matches,function(n,r){var o=a.matches[n+1];(void 0===o||void 0===o.matches||!1===o.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,t||(k(r,i.groupmarker[0],0),!0!==r.openGroup&&k(r,i.groupmarker[1]))),e(r)})}(d),h.push(d)),(i.numericInput||i.isRTL)&&function e(t){for(var n in t.matches=t.matches.reverse(),t.matches)if(Object.prototype.hasOwnProperty.call(t.matches,n)){var a=parseInt(n);if(t.matches[n].isQuantifier&&t.matches[a+1]&&t.matches[a+1].isGroup){var r=t.matches[n];t.matches.splice(n,1),t.matches.splice(a+1,0,r)}void 0!==t.matches[n].matches?t.matches[n]=e(t.matches[n]):t.matches[n]=((o=t.matches[n])===i.optionalmarker[0]?o=i.optionalmarker[1]:o===i.optionalmarker[1]?o=i.optionalmarker[0]:o===i.groupmarker[0]?o=i.groupmarker[1]:o===i.groupmarker[1]&&(o=i.groupmarker[0]),o)}var o;return t}(h[0]),h}}},function(e,t,i){"use strict";i(7),i(9),i(10),i(11),e.exports=i(1)},function(e,t,i){"use strict";var n=i(1);n.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}});var a=new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");function r(e,t,i,n,r){return e=-1<i-1&&"."!==t.buffer[i-1]?(e=t.buffer[i-1]+e,-1<i-2&&"."!==t.buffer[i-2]?t.buffer[i-2]+e:"0"+e):"00"+e,a.test(e)}n.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].j[j[j]].k[k[k]].l[l[l]]",definitions:{i:{validator:r},j:{validator:r},k:{validator:r},l:{validator:r}},onUnMask:function(e,t,i){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,i){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0},ssn:{mask:"999-99-9999",postValidation:function(e,t,i,n,a,r,o){return/^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(e.join(""))}}}),e.exports=n},function(e,t,i){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=i(2),r=i(4),o=r.document,s=r.navigator&&r.navigator.userAgent||"",u=0<s.indexOf("MSIE ")||0<s.indexOf("Trident/"),l="ontouchstart"in r,c=/iemobile/i.test(s),p=/iphone/i.test(s)&&!c,f=i(0);e.exports=function e(t,i,s){i=i||this.maskset,s=s||this.opts;var d,m,h,v=this,g=this.el,k=this.isRTL||(this.isRTL=s.numericInput),y=!1,b=!1,x=!1,_=!1,S=!1,P=void 0;function w(e,t,n,a,r){var o=s.greedy;r&&(s.greedy=!1),t=t||0;var u,l,c,p,f=[],d=0;do{if(!0===e&&i.validPositions[d])l=(c=r&&!0===i.validPositions[d].match.optionality&&void 0===i.validPositions[d+1]&&(!0===i.validPositions[d].generatedInput||i.validPositions[d].input==s.skipOptionalPartCharacter&&0<d)?D(d,T(d,u,d-1)):i.validPositions[d]).match,u=c.locator.slice(),f.push(!0===n?c.input:!1===n?l.nativeDef:W(d,l));else{l=(c=C(d,u,d-1)).match,u=c.locator.slice();var m=!0!==a&&(!1!==s.jitMasking?s.jitMasking:l.jit);(p=p&&l.static&&l.def!==s.groupSeparator&&null===l.fn||i.validPositions[d-1]&&l.static&&l.def!==s.groupSeparator&&null===l.fn)||!1===m||void 0===m||"number"==typeof m&&isFinite(m)&&d<m?f.push(!1===n?l.nativeDef:W(d,l)):p=!1}d++}while((void 0===h||d<h)&&(!0!==l.static||""!==l.def)||d<t);return""===f[f.length-1]&&f.pop(),!1===n&&void 0!==i.maskLength||(i.maskLength=d-1),s.greedy=o,f}function E(e){i.buffer=void 0,!0!==e&&(i.validPositions={},i.p=0)}function M(e,t,n){var a=-1,r=-1,o=n||i.validPositions;for(var s in void 0===e&&(e=-1),o){var u=parseInt(s);o[u]&&(t||!0!==o[u].generatedInput)&&(u<=e&&(a=u),e<=u&&(r=u))}return-1===a||a==e?r:-1==r?a:e-a<r-e?a:r}function A(e){var t=e.locator[e.alternation];return"string"==typeof t&&0<t.length&&(t=t.split(",")[0]),void 0!==t?t.toString():""}function O(e,t){var i=(null!=e.alternation?e.mloc[A(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function D(e,t){for(var i,n,a,r=O(j(e=0<e?e-1:0)),o=0;o<t.length;o++){var u=t[o];i=O(u,r.length);var l=Math.abs(i-r);(void 0===n||""!==i&&l<n||a&&!s.greedy&&a.match.optionality&&"master"===a.match.newBlockMarker&&(!u.match.optionality||!u.match.newBlockMarker)||a&&a.match.optionalQuantifier&&!u.match.optionalQuantifier)&&(n=l,a=u)}return a}function C(e,t,n){return i.validPositions[e]||D(e,T(e,t?t.slice():t,n))}function j(e,t){return i.validPositions[e]?i.validPositions[e]:(t||T(e))[0]}function F(e,t,n){for(var a=!1,r=T(e),o=0;o<r.length;o++){if(r[o].match&&(!(r[o].match.nativeDef!==t.match[n.shiftPositions?"def":"nativeDef"]||n.shiftPositions&&t.match.static)||r[o].match.nativeDef===t.match.nativeDef)){a=!0;break}if(r[o].match&&r[o].match.def===t.match.nativeDef){a=void 0;break}}return!1===a&&void 0!==i.jitOffset[e]&&(a=F(e+i.jitOffset[e],t,n)),a}function T(e,t,n){var r,o=i.maskToken,u=t?n:0,l=t?t.slice():[0],c=[],p=!1,f=t?t.join(""):"";function d(t,n,o,l){function m(o,l,h){function v(e,t){var i=0===a.inArray(e,t.matches);return i||a.each(t.matches,function(n,a){if(!0===a.isQuantifier?i=v(e,t.matches[n-1]):Object.prototype.hasOwnProperty.call(a,"matches")&&(i=v(e,a)),i)return!1}),i}function k(e,t,n){var r,o;if((i.tests[e]||i.validPositions[e])&&a.each(i.tests[e]||[i.validPositions[e]],function(e,i){if(i.mloc[t])return r=i,!1;var a=void 0!==n?n:i.alternation,s=void 0!==i.locator[a]?i.locator[a].toString().indexOf(t):-1;(void 0===o||s<o)&&-1!==s&&(r=i,o=s)}),r){var s=r.locator[r.alternation];return(r.mloc[t]||r.mloc[s]||r.locator).slice((void 0!==n?n:r.alternation)+1)}return void 0!==n?k(e,t):void 0}function y(e,t){function i(e){for(var t,i=[],n=-1,a=0,r=e.length;a<r;a++)if("-"===e.charAt(a))for(t=e.charCodeAt(a+1);++n<t;)i.push(String.fromCharCode(n));else n=e.charCodeAt(a),i.push(e.charAt(a));return i.join("")}return e.match.def===t.match.nativeDef||!(!(s.regex||e.match.fn instanceof RegExp&&t.match.fn instanceof RegExp)||!0===e.match.static||!0===t.match.static)&&-1!==i(t.match.fn.toString().replace(/[[\]/]/g,"")).indexOf(i(e.match.fn.toString().replace(/[[\]/]/g,"")))}function b(e,t){var i=e.alternation,n=void 0===t||i===t.alternation&&-1===e.locator[i].toString().indexOf(t.locator[i]);if(!n&&i>t.alternation)for(var a=t.alternation;a<i;a++)if(e.locator[a]!==t.locator[a]){i=a,n=!0;break}if(n){e.mloc=e.mloc||{};var r=e.locator[i];if(void 0!==r){if("string"==typeof r&&(r=r.split(",")[0]),void 0===e.mloc[r]&&(e.mloc[r]=e.locator.slice()),void 0!==t){for(var o in t.mloc)"string"==typeof o&&(o=o.split(",")[0]),void 0===e.mloc[o]&&(e.mloc[o]=t.mloc[o]);e.locator[i]=Object.keys(e.mloc).join(",")}return!0}e.alternation=void 0}return!1}function x(e,t){if(e.locator.length!==t.locator.length)return!1;for(var i=e.alternation+1;i<e.locator.length;i++)if(e.locator[i]!==t.locator[i])return!1;return!0}if(u>s._maxTestPos&&void 0!==h)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+i.mask;if(u===e&&void 0===o.matches)return c.push({match:o,locator:l.reverse(),cd:f,mloc:{}}),!0;if(void 0!==o.matches){if(o.isGroup&&h!==o){if(o=m(t.matches[a.inArray(o,t.matches)+1],l,h))return!0}else if(o.isOptional){var _=o,S=c.length;if(o=d(o,n,l,h)){if(a.each(c,function(e,t){S<=e&&(t.match.optionality=!0)}),r=c[c.length-1].match,void 0!==h||!v(r,_))return!0;p=!0,u=e}}else if(o.isAlternator){var P,w=o,E=[],M=c.slice(),A=l.length,O=0<n.length?n.shift():-1;if(-1===O||"string"==typeof O){var D,C=u,j=n.slice(),F=[];if("string"==typeof O)F=O.split(",");else for(D=0;D<w.matches.length;D++)F.push(D.toString());if(void 0!==i.excludes[e]){for(var T=F.slice(),R=0,I=i.excludes[e].length;R<I;R++){var B=i.excludes[e][R].toString().split(":");l.length==B[1]&&F.splice(F.indexOf(B[0]),1)}0===F.length&&(delete i.excludes[e],F=T)}(!0===s.keepStatic||isFinite(parseInt(s.keepStatic))&&C>=s.keepStatic)&&(F=F.slice(0,1));for(var L=!1,N=0;N<F.length;N++){D=parseInt(F[N]),c=[],n="string"==typeof O&&k(u,D,A)||j.slice(),w.matches[D]&&m(w.matches[D],[D].concat(l),h)?o=!0:0===N&&(L=!0),P=c.slice(),u=C,c=[];for(var G=0;G<P.length;G++){var V=P[G],H=!1;V.match.jit=V.match.jit||L,V.alternation=V.alternation||A,b(V);for(var K=0;K<E.length;K++){var q=E[K];if("string"!=typeof O||void 0!==V.alternation&&-1!==a.inArray(V.locator[V.alternation].toString(),F)){if(V.match.nativeDef===q.match.nativeDef){H=!0,b(q,V);break}if(y(V,q)){b(V,q)&&(H=!0,E.splice(E.indexOf(q),0,V));break}if(y(q,V)){b(q,V);break}if($=q,!0===(W=V).match.static&&!0!==$.match.static&&$.match.fn.test(W.match.def,i,e,!1,s,!1)){x(V,q)||void 0!==g.inputmask.userOptions.keepStatic?b(V,q)&&(H=!0,E.splice(E.indexOf(q),0,V)):s.keepStatic=!0;break}}}H||E.push(V)}}c=M.concat(E),u=e,p=0<c.length,o=0<E.length,n=j.slice()}else o=m(w.matches[O]||t.matches[O],[O].concat(l),h);if(o)return!0}else if(o.isQuantifier&&h!==t.matches[a.inArray(o,t.matches)-1])for(var U=o,z=0<n.length?n.shift():0;z<(isNaN(U.quantifier.max)?z+1:U.quantifier.max)&&u<=e;z++){var Q=t.matches[a.inArray(U,t.matches)-1];if(o=m(Q,[z].concat(l),Q)){if((r=c[c.length-1].match).optionalQuantifier=z>=U.quantifier.min,r.jit=(z||1)*Q.matches.indexOf(r)>=U.quantifier.jit,r.optionalQuantifier&&v(r,Q)){p=!0,u=e;break}return r.jit&&(i.jitOffset[e]=Q.matches.length-Q.matches.indexOf(r)),!0}}else if(o=d(o,n,l,h))return!0}else u++;var W,$}for(var h=0<n.length?n.shift():0;h<t.matches.length;h++)if(!0!==t.matches[h].isQuantifier){var v=m(t.matches[h],[h].concat(o),l);if(v&&u===e)return v;if(e<u)break}}if(-1<e&&(void 0===h||e<h)){if(void 0===t){for(var m,v=e-1;void 0===(m=i.validPositions[v]||i.tests[v])&&-1<v;)v--;void 0!==m&&-1<v&&(l=function(e,t){var i=[];return a.isArray(t)||(t=[t]),0<t.length&&(void 0===t[0].alternation||!0===s.keepStatic?0===(i=D(e,t.slice()).locator.slice()).length&&(i=t[0].locator.slice()):a.each(t,function(e,t){if(""!==t.def)if(0===i.length)i=t.locator.slice();else for(var n=0;n<i.length;n++)t.locator[n]&&-1===i[n].toString().indexOf(t.locator[n])&&(i[n]+=","+t.locator[n])})),i}(v,m),f=l.join(""),u=v)}if(i.tests[e]&&i.tests[e][0].cd===f)return i.tests[e];for(var k=l.shift();k<o.length;k++){if(d(o[k],l,[k])&&u===e||e<u)break}}return 0!==c.length&&!p||c.push({match:{fn:null,static:!0,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:f}),void 0!==t&&i.tests[e]?a.extend(!0,[],c):(i.tests[e]=a.extend(!0,[],c),i.tests[e])}function R(){return void 0===i._buffer&&(i._buffer=w(!1,1),void 0===i.buffer&&(i.buffer=i._buffer.slice())),i._buffer}function I(e){return void 0!==i.buffer&&!0!==e||(i.buffer=w(!0,M(),!0),void 0===i._buffer&&(i._buffer=i.buffer.slice())),i.buffer}function B(e,t,n){var r,o,u=s.skipOptionalPartCharacter,l=k?n.slice().reverse():n;if(s.skipOptionalPartCharacter="",!0===e)E(),i.tests={},e=0,t=n.length,o=Z({begin:0,end:0},!1).begin;else{for(r=e;r<t;r++)delete i.validPositions[r];o=e}var c=new a.Event("keypress");for(r=e;r<t;r++){c.which=l[r].toString().charCodeAt(0),_=!1;var p=X.keypressEvent.call(g,c,!0,!1,!1,o);!1!==p&&(o=p.forwardPosition)}s.skipOptionalPartCharacter=u}function L(e,t,n){switch(s.casing||t.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var r=i.validPositions[n-1];e=0===n||r&&r.input===String.fromCharCode(f.SPACE)?e.toUpperCase():e.toLowerCase();break;default:if(a.isFunction(s.casing)){var o=Array.prototype.slice.call(arguments);o.push(i.validPositions),e=s.casing.apply(this,o)}}return e}function N(e,t,i){for(var n,r=s.greedy?t:t.slice(0,1),o=!1,u=void 0!==i?i.split(","):[],l=0;l<u.length;l++)-1!==(n=e.indexOf(u[l]))&&e.splice(n,1);for(var c=0;c<e.length;c++)if(-1!==a.inArray(e[c],r)){o=!0;break}return o}function G(e,t,n,r,o,u){var l,c,p,f,d,m,h,v,g,k=a.extend(!0,{},i.validPositions),y=a.extend(!0,{},i.tests),b=!1,x=!1,_=void 0!==o?o:M();if(u&&(v=u.begin,g=u.end,u.begin>u.end&&(v=u.end,g=u.begin)),-1===_&&void 0===o)c=(f=j(l=0)).alternation;else for(;0<=_;_--)if((p=i.validPositions[_])&&void 0!==p.alternation){if(f&&f.locator[p.alternation]!==p.locator[p.alternation])break;l=_,c=i.validPositions[l].alternation,f=p}if(void 0!==c){h=parseInt(l),i.excludes[h]=i.excludes[h]||[],!0!==e&&i.excludes[h].push(A(f)+":"+f.alternation);var S=[],P=-1;for(d=h;d<M(void 0,!0)+1;d++)-1===P&&e<=d&&void 0!==t&&(S.push(t),P=S.length-1),(m=i.validPositions[d])&&!0!==m.generatedInput&&(void 0===u||d<v||g<=d)&&S.push(m.input),delete i.validPositions[d];for(-1===P&&void 0!==t&&(S.push(t),P=S.length-1);void 0!==i.excludes[h]&&i.excludes[h].length<10;){for(i.tests={},E(!0),b=!0,d=0;d<S.length&&(b=V(b.caret||M(void 0,!0)+1,S[d],!1,r,!0));d++)d===P&&(x=b),1==e&&b&&(x={caretPos:d});if(b)break;if(E(),f=j(h),i.validPositions=a.extend(!0,{},k),i.tests=a.extend(!0,{},y),!i.excludes[h]){x=G(e,t,n,r,h-1,u);break}var w=A(f);if(-1!==i.excludes[h].indexOf(w+":"+f.alternation)){x=G(e,t,n,r,h-1,u);break}for(i.excludes[h].push(w+":"+f.alternation),d=h;d<M(void 0,!0)+1;d++)delete i.validPositions[d]}}return x&&!1===s.keepStatic||delete i.excludes[h],x}function V(e,t,n,r,o,u){function l(e){return k?1<e.begin-e.end||e.begin-e.end==1:1<e.end-e.begin||e.end-e.begin==1}n=!0===n;var c=e;function p(e){if(void 0!==e){if(void 0!==e.remove&&(a.isArray(e.remove)||(e.remove=[e.remove]),a.each(e.remove.sort(function(e,t){return t.pos-e.pos}),function(e,t){K({begin:t,end:t+1})}),e.remove=void 0),void 0!==e.insert&&(a.isArray(e.insert)||(e.insert=[e.insert]),a.each(e.insert.sort(function(e,t){return e.pos-t.pos}),function(e,t){""!==t.c&&V(t.pos,t.c,void 0===t.strict||t.strict,void 0!==t.fromIsValid?t.fromIsValid:r)}),e.insert=void 0),e.refreshFromBuffer&&e.buffer){var t=e.refreshFromBuffer;B(!0===t?t:t.start,t.end,e.buffer),e.refreshFromBuffer=void 0}void 0!==e.rewritePosition&&(c=e.rewritePosition,e=!0)}return e}function f(t,n,o){var u=!1;return a.each(T(t),function(c,f){var d=f.match;if(I(!0),!1!==(u=null!=d.fn?d.fn.test(n,i,t,o,s,l(e)):(n===d.def||n===s.skipOptionalPartCharacter)&&""!==d.def&&{c:W(t,d,!0)||d.def,pos:t})){var m=void 0!==u.c?u.c:n,h=t;return m=m===s.skipOptionalPartCharacter&&!0===d.static?W(t,d,!0)||d.def:m,!0!==(u=p(u))&&void 0!==u.pos&&u.pos!==t&&(h=u.pos),(!0===u||void 0!==u.pos||void 0!==u.c)&&(!1===K(e,a.extend({},f,{input:L(m,d,h)}),r,h)&&(u=!1),!1)}}),u}void 0!==e.begin&&(c=k?e.end:e.begin);var d=!0,m=a.extend(!0,{},i.validPositions);if(!1===s.keepStatic&&void 0!==i.excludes[c]&&!0!==o&&!0!==r)for(var v=c;v<(k?e.begin:e.end);v++)void 0!==i.excludes[v]&&(i.excludes[v]=void 0,delete i.tests[v]);if(a.isFunction(s.preValidation)&&!0!==r&&!0!==u&&(d=p(d=s.preValidation.call(g,I(),c,t,l(e),s,i,e,n||o))),!0===d){if(void 0===h||c<h){if(d=f(c,t,n),(!n||!0===r)&&!1===d&&!0!==u){var y=i.validPositions[c];if(!y||!0!==y.match.static||y.match.def!==t&&t!==s.skipOptionalPartCharacter){if(s.insertMode||void 0===i.validPositions[U(c)]||e.end>c){var b=!1;if(i.jitOffset[c]&&void 0===i.validPositions[U(c)]&&(!1!==(d=V(c+i.jitOffset[c],t,!0))&&(!0!==o&&(d.caret=c),b=!0)),e.end>c&&(i.validPositions[c]=void 0),!b&&!q(c,s.keepStatic))for(var x=c+1,_=U(c);x<=_;x++)if(!1!==(d=f(x,t,n))){d=H(c,void 0!==d.pos?d.pos:x)||d,c=x;break}}}else d={caret:U(c)}}}else d=!1;!1!==d||!s.keepStatic||!oe(I())&&0!==c||n||!0===o?l(e)&&i.tests[c]&&1<i.tests[c].length&&s.keepStatic&&!n&&!0!==o&&(d=G(!0)):d=G(c,t,n,r,void 0,e),!0===d&&(d={pos:c})}if(a.isFunction(s.postValidation)&&!0!==r&&!0!==u){var S=s.postValidation.call(g,I(!0),void 0!==e.begin?k?e.end:e.begin:e,t,d,s,i,n);void 0!==S&&(d=!0===S?d:S)}return d&&void 0===d.pos&&(d.pos=c),!1===d||!0===u?(E(!0),i.validPositions=a.extend(!0,{},m)):H(void 0,c,!0),p(d)}function H(e,t,n){if(void 0===e)for(e=t-1;0<e&&!i.validPositions[e];e--);for(var r=e;r<t;r++)if(void 0===i.validPositions[r]&&!q(r,!0)){if(0==r?j(r):i.validPositions[r-1]){var o=T(r).slice();""===o[o.length-1].match.def&&o.pop();var s,u=D(r,o);if(u&&(!0!==u.match.jit||"master"===u.match.newBlockMarker&&(s=i.validPositions[r+1])&&!0===s.match.optionalQuantifier)&&((u=a.extend({},u,{input:W(r,u.match,!0)||u.match.def})).generatedInput=!0,K(r,u,!0),!0!==n)){var l=i.validPositions[t].input;return i.validPositions[t]=void 0,V(t,l,!0,!0)}}}}function K(e,t,n,r){function o(e,t,i){var n=t[e];if(void 0===n||!0!==n.match.static||!0===n.match.optionality||void 0!==t[0]&&void 0!==t[0].alternation)return!1;var a=i.begin<=e-1?t[e-1]&&!0===t[e-1].match.static&&t[e-1]:t[e-1],r=i.end>e+1?t[e+1]&&!0===t[e+1].match.static&&t[e+1]:t[e+1];return a&&r}var u=0,l=void 0!==e.begin?e.begin:e,c=void 0!==e.end?e.end:e;if(e.begin>e.end&&(l=e.end,c=e.begin),r=void 0!==r?r:l,l!==c||s.insertMode&&void 0!==i.validPositions[r]&&void 0===n||void 0===t){var p,f=a.extend(!0,{},i.validPositions),d=M(void 0,!0);for(i.p=l,p=d;l<=p;p--)delete i.validPositions[p],void 0===t&&delete i.tests[p+1];var m,h,v=!0,g=r,k=g;for(t&&(i.validPositions[r]=a.extend(!0,{},t),k++,g++),p=t?c:c-1;p<=d;p++){if(void 0!==(m=f[p])&&!0!==m.generatedInput&&(c<=p||l<=p&&o(p,f,{begin:l,end:c}))){for(;""!==j(k).match.def;){if(!1!==(h=F(k,m,s))||"+"===m.match.def){"+"===m.match.def&&I(!0);var y=V(k,m.input,"+"!==m.match.def,"+"!==m.match.def);if(v=!1!==y,g=(y.pos||k)+1,!v&&h)break}else v=!1;if(v){void 0===t&&m.match.static&&p===e.begin&&u++;break}if(!v&&k>i.maskLength)break;k++}""==j(k).match.def&&(v=!1),k=g}if(!v)break}if(!v)return i.validPositions=a.extend(!0,{},f),E(!0),!1}else t&&j(r).match.cd===t.match.cd&&(i.validPositions[r]=a.extend(!0,{},t));return E(!0),u}function q(e,t,n){var a=C(e).match;if(""===a.def&&(a=j(e).match),!0!==a.static)return a.fn;if(!0===n&&void 0!==i.validPositions[e]&&!0!==i.validPositions[e].generatedInput)return!0;if(!0!==t&&-1<e){if(n){var r=T(e);return r.length>1+(""===r[r.length-1].match.def?1:0)}var o=D(e,T(e)),s=W(e,o.match);return o.match.def!==s}return!1}function U(e,t,i){void 0===i&&(i=!0);for(var n=e+1;""!==j(n).match.def&&(!0===t&&(!0!==j(n).match.newBlockMarker||!q(n,void 0,!0))||!0!==t&&!q(n,void 0,i));)n++;return n}function z(e,t){var i,n=e;if(n<=0)return 0;for(;0<--n&&(!0===t&&!0!==j(n).match.newBlockMarker||!0!==t&&!q(n,void 0,!0)&&((i=T(n)).length<2||2===i.length&&""===i[1].match.def)););return n}function Q(e,t,i,n,r){if(n&&a.isFunction(s.onBeforeWrite)){var o=s.onBeforeWrite.call(v,n,t,i,s);if(o){if(o.refreshFromBuffer){var u=o.refreshFromBuffer;B(!0===u?u:u.start,u.end,o.buffer||t),t=I(!0)}void 0!==i&&(i=void 0!==o.caret?o.caret:i)}}if(void 0!==e&&(e.inputmask._valueSet(t.join("")),void 0===i||void 0!==n&&"blur"===n.type||ne(e,i,void 0,void 0,void 0!==n&&"keydown"===n.type&&(n.keyCode===f.DELETE||n.keyCode===f.BACKSPACE)),!0===r)){var l=a(e),c=e.inputmask._valueGet();b=!0,l.trigger("input"),setTimeout(function(){c===R().join("")?l.trigger("cleared"):!0===oe(t)&&l.trigger("complete")},0)}}function W(e,t,n){if(void 0!==(t=t||j(e).match).placeholder||!0===n)return a.isFunction(t.placeholder)?t.placeholder(s):t.placeholder;if(!0!==t.static)return s.placeholder.charAt(e%s.placeholder.length);if(-1<e&&void 0===i.validPositions[e]){var r,o=T(e),u=[];if(o.length>1+(""===o[o.length-1].match.def?1:0))for(var l=0;l<o.length;l++)if(""!==o[l].match.def&&!0!==o[l].match.optionality&&!0!==o[l].match.optionalQuantifier&&(!0===o[l].match.static||void 0===r||!1!==o[l].match.fn.test(r.match.def,i,e,!0,s))&&(u.push(o[l]),!0===o[l].match.static&&(r=o[l]),1<u.length&&/[0-9a-bA-Z]/.test(u[0].match.def)))return s.placeholder.charAt(e%s.placeholder.length)}return t.def}function $(e,t){if(u){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var i=I().slice(),n=e.inputmask._valueGet();if(n!==t){var a=M();-1===a&&n===R().join("")?i=[]:-1!==a&&re(i),Q(e,i)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}function Z(e,t){if(t&&(k?e.end=e.begin:e.begin=e.end),e.begin===e.end){switch(s.positionCaretOnClick){case"none":break;case"select":e={begin:0,end:I().length};break;case"ignore":e.end=e.begin=U(M());break;case"radixFocus":if(function(e){if(""!==s.radixPoint&&0!==s.digits){var t=i.validPositions;if(void 0===t[e]||t[e].input===W(e)){if(e<U(-1))return!0;var n=a.inArray(s.radixPoint,I());if(-1!==n){for(var r in t)if(t[r]&&n<r&&t[r].input!==W(r))return!1;return!0}}}return!1}(e.begin)){var n=I().join("").indexOf(s.radixPoint);e.end=e.begin=s.numericInput?U(n):n;break}default:var r=e.begin,o=M(r,!0),u=U(-1!==o||q(0)?o:0);if(r<u)e.end=e.begin=q(r,!0)||q(r-1,!0)?r:U(r);else{var l=i.validPositions[o],c=C(u,l?l.match.locator:void 0,l),p=W(u,c.match);if(""!==p&&I()[u]!==p&&!0!==c.match.optionalQuantifier&&!0!==c.match.newBlockMarker||!q(u,s.keepStatic)&&c.match.def===p){var f=U(u);(f<=r||r===u)&&(u=f)}e.end=e.begin=u}}return e}}var J,Y={on:function(e,t,i){var n=function(t){t.originalEvent&&(t=t.originalEvent||t,arguments[0]=t);var n,r=this;if(void 0===r.inputmask&&"FORM"!==this.nodeName){var o=a.data(r,"_inputmask_opts");o?new Inputmask(o).mask(r):Y.off(r)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(r.disabled||r.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===s.tabThrough&&t.keyCode===f.TAB))){switch(t.type){case"input":if(!0===b||t.inputType&&"insertCompositionText"===t.inputType)return b=!1,t.preventDefault();break;case"keydown":y=!1,b=!1;break;case"keypress":if(!0===y)return t.preventDefault();y=!0;break;case"click":case"focus":return x?(x=!1,e.blur(),$(e,(k?R().slice().reverse():R()).join("")),setTimeout(function(){e.focus()},3e3)):(n=arguments,setTimeout(function(){e.inputmask&&i.apply(r,n)},0)),!1}var u=i.apply(r,arguments);return!1===u&&(t.preventDefault(),t.stopPropagation()),u}t.preventDefault()}};e.inputmask.events[t]=e.inputmask.events[t]||[],e.inputmask.events[t].push(n),-1!==a.inArray(t,["submit","reset"])?null!==e.form&&a(e.form).on(t,n):a(e).on(t,n)},off:function(e,t){var i;e.inputmask&&e.inputmask.events&&(t?(i=[])[t]=e.inputmask.events[t]:i=e.inputmask.events,a.each(i,function(t,i){for(;0<i.length;){var n=i.pop();-1!==a.inArray(t,["submit","reset"])?null!==e.form&&a(e.form).off(t,n):a(e).off(t,n)}delete e.inputmask.events[t]}))}},X={keydownEvent:function(e){var t=this,n=a(t),r=e.keyCode,o=ne(t),u=s.onKeyDown.call(this,e,I(),o,s);if(void 0!==u)return u;if(r===f.BACKSPACE||r===f.DELETE||p&&r===f.BACKSPACE_SAFARI||e.ctrlKey&&r===f.X&&!("oncut"in t))e.preventDefault(),se(t,r,o),Q(t,I(!0),i.p,e,t.inputmask._valueGet()!==I().join(""));else if(r===f.END||r===f.PAGE_DOWN){e.preventDefault();var l=U(M());ne(t,e.shiftKey?o.begin:l,l,!0)}else r===f.HOME&&!e.shiftKey||r===f.PAGE_UP?(e.preventDefault(),ne(t,0,e.shiftKey?o.begin:0,!0)):(s.undoOnEscape&&r===f.ESCAPE||90===r&&e.ctrlKey)&&!0!==e.altKey?(ee(t,!0,!1,d.split("")),n.trigger("click")):!0===s.tabThrough&&r===f.TAB?(!0===e.shiftKey?(!0===j(o.begin).match.static&&(o.begin=U(o.begin)),o.end=z(o.begin,!0),o.begin=z(o.end,!0)):(o.begin=U(o.begin,!0),o.end=U(o.begin,!0),o.end<i.maskLength&&o.end--),o.begin<i.maskLength&&(e.preventDefault(),ne(t,o.begin,o.end))):e.shiftKey||s.insertModeVisual&&!1===s.insertMode&&(r===f.RIGHT?setTimeout(function(){var e=ne(t);ne(t,e.begin)},0):r===f.LEFT&&setTimeout(function(){var e=ie(t.inputmask.caretPos.begin);ie(t.inputmask.caretPos.end);ne(t,k?e+(e===i.maskLength?0:1):e-(0===e?0:1))},0));_=-1!==a.inArray(r,s.ignorables)},keypressEvent:function(e,t,n,r,o){var u=this,l=a(u),c=e.which||e.charCode||e.keyCode;if(!(!0===t||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||_))return c===f.ENTER&&d!==I().join("")&&(d=I().join(""),setTimeout(function(){l.trigger("change")},0)),b=!0,!0;if(c){44!==c&&46!==c||3!==e.location||""===s.radixPoint||(c=s.radixPoint.charCodeAt(0));var p,m=t?{begin:o,end:o}:ne(u),h=String.fromCharCode(c);i.writeOutBuffer=!0;var v=V(m,h,r);if(!1!==v&&(E(!0),p=void 0!==v.caret?v.caret:U(v.pos.begin?v.pos.begin:v.pos),i.p=p),p=s.numericInput&&void 0===v.caret?z(p):p,!1!==n&&(setTimeout(function(){s.onKeyValidation.call(u,c,v)},0),i.writeOutBuffer&&!1!==v)){var g=I();Q(u,g,p,e,!0!==t)}if(e.preventDefault(),t)return!1!==v&&(v.forwardPosition=p),v}},pasteEvent:function(e){var t,i=this.inputmask._valueGet(!0),n=ne(this);k&&(t=n.end,n.end=n.begin,n.begin=t);var o=i.substr(0,n.begin),u=i.substr(n.end,i.length);if(o==(k?R().slice().reverse():R()).slice(0,n.begin).join("")&&(o=""),u==(k?R().slice().reverse():R()).slice(n.end).join("")&&(u=""),r.clipboardData&&r.clipboardData.getData)i=o+r.clipboardData.getData("Text")+u;else{if(!e.clipboardData||!e.clipboardData.getData)return!0;i=o+e.clipboardData.getData("text/plain")+u}var l=i;if(a.isFunction(s.onBeforePaste)){if(!1===(l=s.onBeforePaste.call(v,i,s)))return e.preventDefault();l=l||i}return ee(this,!1,!1,l.toString().split("")),Q(this,I(),U(M()),e,d!==I().join("")),e.preventDefault()},inputFallBackEvent:function(e){var t=this,i=t.inputmask._valueGet(!0),n=(k?I().slice().reverse():I()).join(""),r=ne(t,void 0,void 0,!0);if(n!==i){var u=function(e,t,i){for(var n,a,r,o=e.substr(0,i.begin).split(""),u=e.substr(i.begin).split(""),l=t.substr(0,i.begin).split(""),c=t.substr(i.begin).split(""),p=o.length>=l.length?o.length:l.length,f=u.length>=c.length?u.length:c.length,d="",m=[];o.length<p;)o.push("~");for(;l.length<p;)l.push("~");for(;u.length<f;)u.unshift("~");for(;c.length<f;)c.unshift("~");var h=o.concat(u),v=l.concat(c);for(a=0,n=h.length;a<n;a++)switch(r=W(ie(a)),d){case"insertText":v[a-1]===h[a]&&i.begin==h.length-1&&m.push(h[a]),a=n;break;case"insertReplacementText":case"deleteContentBackward":"~"===h[a]?i.end++:a=n;break;default:h[a]!==v[a]&&("~"!==h[a+1]&&h[a+1]!==r&&void 0!==h[a+1]||(v[a]!==r||"~"!==v[a+1])&&"~"!==v[a]?"~"===v[a+1]&&v[a]===h[a+1]?(d="insertText",m.push(h[a]),i.begin--,i.end--):h[a]!==r&&"~"!==h[a]&&("~"===h[a+1]||v[a]!==h[a]&&v[a+1]===h[a+1])?(d="insertReplacementText",m.push(h[a]),i.begin--):"~"===h[a]?(d="deleteContentBackward",!q(ie(a),!0)&&v[a]!==s.radixPoint||i.end++):a=n:(d="insertText",m.push(h[a]),i.begin--,i.end--))}return{action:d,data:m,caret:i}}(i=function(e,t,i){if(c){var n=t.replace(I().join(""),"");if(1===n.length){var a=t.split("");a.splice(i.begin,0,n),t=a.join("")}}return t}(0,i,r),n,r);switch((t.inputmask.shadowRoot||o).activeElement!==t&&t.focus(),Q(t,I()),ne(t,r.begin,r.end,!0),u.action){case"insertText":case"insertReplacementText":a.each(u.data,function(e,i){var n=new a.Event("keypress");n.which=i.charCodeAt(0),_=!1,X.keypressEvent.call(t,n)}),setTimeout(function(){m.trigger("keyup")},0);break;case"deleteContentBackward":var l=new a.Event("keydown");l.keyCode=f.BACKSPACE,X.keydownEvent.call(t,l);break;default:ue(t,i)}e.preventDefault()}},compositionendEvent:function(e){m.trigger("input")},setValueEvent:function(e,t,i){var n=e&&e.detail?e.detail[0]:t;void 0===n&&(n=this.inputmask._valueGet(!0)),ue(this,n),(e.detail&&void 0!==e.detail[1]||void 0!==i)&&ne(this,e.detail?e.detail[1]:i)},focusEvent:function(e){var t=this.inputmask._valueGet();s.showMaskOnFocus&&t!==I().join("")&&Q(this,I(),U(M())),!0!==s.positionCaretOnTab||!1!==S||oe(I())&&-1!==M()||X.clickEvent.apply(this,[e,!0]),d=I().join("")},invalidEvent:function(e){x=!0},mouseleaveEvent:function(){S=!1,s.clearMaskOnLostFocus&&(this.inputmask.shadowRoot||o).activeElement!==this&&$(this,P)},clickEvent:function(e,t){if((this.inputmask.shadowRoot||o).activeElement===this){var i=Z(ne(this),t);void 0!==i&&ne(this,i)}},cutEvent:function(e){var t=ne(this),n=r.clipboardData||e.clipboardData,a=k?I().slice(t.end,t.begin):I().slice(t.begin,t.end);n.setData("text",k?a.reverse().join(""):a.join("")),o.execCommand&&o.execCommand("copy"),se(this,f.DELETE,t),Q(this,I(),i.p,e,d!==I().join(""))},blurEvent:function(e){var t=a(this);if(this.inputmask){$(this,P);var i=this.inputmask._valueGet(),n=I().slice();""!==i&&(s.clearMaskOnLostFocus&&(-1===M()&&i===R().join("")?n=[]:re(n)),!1===oe(n)&&(setTimeout(function(){t.trigger("incomplete")},0),s.clearIncomplete&&(E(),n=s.clearMaskOnLostFocus?[]:R().slice())),Q(this,n,void 0,e)),d!==I().join("")&&(d=I().join(""),t.trigger("change"))}},mouseenterEvent:function(){S=!0,(this.inputmask.shadowRoot||o).activeElement!==this&&(null==P&&this.placeholder!==P&&(P=this.placeholder),s.showMaskOnHover&&$(this,(k?R().slice().reverse():R()).join("")))},submitEvent:function(){d!==I().join("")&&m.trigger("change"),s.clearMaskOnLostFocus&&-1===M()&&g.inputmask._valueGet&&g.inputmask._valueGet()===R().join("")&&g.inputmask._valueSet(""),s.clearIncomplete&&!1===oe(I())&&g.inputmask._valueSet(""),s.removeMaskOnSubmit&&(g.inputmask._valueSet(g.inputmask.unmaskedvalue(),!0),setTimeout(function(){Q(g,I())},0))},resetEvent:function(){g.inputmask.refreshValue=!0,setTimeout(function(){ue(g,g.inputmask._valueGet(!0))},0)}};function ee(e,t,n,r,o){var u=this||e.inputmask,l=r.slice(),c="",p=-1,f=void 0;E(),i.tests={},p=s.radixPoint?Z({begin:0,end:0}).begin:0,i.p=p,u.caretPos={begin:p};var d=[],m=u.caretPos;if(a.each(l,function(t,r){if(void 0!==r)if(void 0===i.validPositions[t]&&l[t]===W(t)&&q(t,!0)&&!1===V(t,l[t],!0,void 0,void 0,!0))i.p++;else{var o=new a.Event("_checkval");o.which=r.toString().charCodeAt(0),c+=r;var s=M(void 0,!0);!function(e,t){for(var i=w(!0,0).slice(e,U(e)).join("").replace(/'/g,""),n=i.indexOf(t);0<n&&" "===i[n-1];)n--;var a=0===n&&!q(e)&&(j(e).match.nativeDef===t.charAt(0)||!0===j(e).match.static&&j(e).match.nativeDef==="'"+t.charAt(0)||" "===j(e).match.nativeDef&&(j(e+1).match.nativeDef===t.charAt(0)||!0===j(e+1).match.static&&j(e+1).match.nativeDef==="'"+t.charAt(0)));if(!a&&0<n&&!q(e,!1,!0)){var r=U(e);u.caretPos.begin<r&&(u.caretPos={begin:r})}return a}(p,c)?(f=X.keypressEvent.call(e,o,!0,!1,n,u.caretPos.begin))&&(p=u.caretPos.begin+1,c=""):f=X.keypressEvent.call(e,o,!0,!1,n,s+1),f?(void 0!==f.pos&&i.validPositions[f.pos]&&!0===i.validPositions[f.pos].match.static&&void 0===i.validPositions[f.pos].alternation&&(d.push(f.pos),k||(f.forwardPosition=f.pos+1)),Q(void 0,I(),f.forwardPosition,o,!1),u.caretPos={begin:f.forwardPosition,end:f.forwardPosition},m=u.caretPos):u.caretPos=m}}),0<d.length){var h,v,g=U(-1,void 0,!1);if(!oe(I())&&d.length<=g||oe(I())&&0<d.length&&d.length!==g&&0===d[0])for(var y=g;void 0!==(h=d.shift());){var b=new a.Event("_checkval");if((v=i.validPositions[h]).generatedInput=!0,b.which=v.input.charCodeAt(0),(f=X.keypressEvent.call(e,b,!0,!1,n,y))&&void 0!==f.pos&&f.pos!==h&&i.validPositions[f.pos]&&!0===i.validPositions[f.pos].match.static)d.push(f.pos);else if(!f)break;y++}else for(;h=d.pop();)(v=i.validPositions[h])&&(v.generatedInput=!0)}if(t)for(var x in Q(e,I(),f?f.forwardPosition:void 0,o||new a.Event("checkval"),o&&"input"===o.type),i.validPositions)!0!==i.validPositions[x].match.generated&&delete i.validPositions[x].generatedInput}function te(e){if(e){if(void 0===e.inputmask)return e.value;e.inputmask&&e.inputmask.refreshValue&&ue(e,e.inputmask._valueGet(!0))}var t=[],n=i.validPositions;for(var r in n)n[r]&&n[r].match&&(1!=n[r].match.static||!0!==n[r].generatedInput)&&t.push(n[r].input);var o=0===t.length?"":(k?t.reverse():t).join("");if(a.isFunction(s.onUnMask)){var u=(k?I().slice().reverse():I()).join("");o=s.onUnMask.call(v,u,o,s)}return o}function ie(e){return!k||"number"!=typeof e||s.greedy&&""===s.placeholder||!g||(e=g.inputmask._valueGet().length-e),e}function ne(e,t,i,n,u){var l;if(void 0===t)return"selectionStart"in e&&"selectionEnd"in e?(t=e.selectionStart,i=e.selectionEnd):r.getSelection?(l=r.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&l.commonAncestorContainer!==e||(t=l.startOffset,i=l.endOffset):o.selection&&o.selection.createRange&&(i=(t=0-(l=o.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+l.text.length),{begin:n?t:ie(t),end:n?i:ie(i)};if(a.isArray(t)&&(i=k?t[0]:t[1],t=k?t[1]:t[0]),void 0!==t.begin&&(i=k?t.begin:t.end,t=k?t.end:t.begin),"number"==typeof t){t=n?t:ie(t),i="number"==typeof(i=n?i:ie(i))?i:t;var c=parseInt(((e.ownerDocument.defaultView||r).getComputedStyle?(e.ownerDocument.defaultView||r).getComputedStyle(e,null):e.currentStyle).fontSize)*i;if(e.scrollLeft=c>e.scrollWidth?c:0,e.inputmask.caretPos={begin:t,end:i},s.insertModeVisual&&!1===s.insertMode&&t===i&&(u||i++),e===(e.inputmask.shadowRoot||o).activeElement)if("setSelectionRange"in e)e.setSelectionRange(t,i);else if(r.getSelection){if(l=o.createRange(),void 0===e.firstChild||null===e.firstChild){var p=o.createTextNode("");e.appendChild(p)}l.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),l.setEnd(e.firstChild,i<e.inputmask._valueGet().length?i:e.inputmask._valueGet().length),l.collapse(!0);var f=r.getSelection();f.removeAllRanges(),f.addRange(l)}else e.createTextRange&&((l=e.createTextRange()).collapse(!0),l.moveEnd("character",i),l.moveStart("character",t),l.select())}}function ae(e){var t,n,r=w(!0,M(),!0,!0),o=r.length,s=M(),u={},l=i.validPositions[s],c=void 0!==l?l.locator.slice():void 0;for(t=s+1;t<r.length;t++)c=(n=C(t,c,t-1)).locator.slice(),u[t]=a.extend(!0,{},n);var p=l&&void 0!==l.alternation?l.locator[l.alternation]:void 0;for(t=o-1;s<t&&(((n=u[t]).match.optionality||n.match.optionalQuantifier&&n.match.newBlockMarker||p&&(p!==u[t].locator[l.alternation]&&1!=n.match.static||!0===n.match.static&&n.locator[l.alternation]&&N(n.locator[l.alternation].toString().split(","),p.toString().split(","))&&""!==T(t)[0].def))&&r[t]===W(t,n.match));t--)o--;return e?{l:o,def:u[o]?u[o].match:void 0}:o}function re(e){e.length=0;for(var t,i=w(!0,0,!0,void 0,!0);void 0!==(t=i.shift());)e.push(t);return e}function oe(e){if(a.isFunction(s.isComplete))return s.isComplete(e,s);if("*"!==s.repeat){var t=!1,n=ae(!0),r=z(n.l);if(void 0===n.def||n.def.newBlockMarker||n.def.optionality||n.def.optionalQuantifier){t=!0;for(var o=0;o<=r;o++){var u=C(o).match;if(!0!==u.static&&void 0===i.validPositions[o]&&!0!==u.optionality&&!0!==u.optionalQuantifier||!0===u.static&&e[o]!==W(o,u)){t=!1;break}}}return t}}function se(e,t,n,a,r){if((s.numericInput||k)&&(t===f.BACKSPACE?t=f.DELETE:t===f.DELETE&&(t=f.BACKSPACE),k)){var o=n.end;n.end=n.begin,n.begin=o}var u,l=M(void 0,!0);if(n.end>=I().length&&l>=n.end&&(n.end=l+1),t===f.BACKSPACE?n.end-n.begin<1&&(n.begin=z(n.begin)):t===f.DELETE&&n.begin===n.end&&(n.end=q(n.end,!0,!0)?n.end+1:U(n.end)+1),!1!==(u=K(n))){if(!0!==a&&!1!==s.keepStatic||null!==s.regex&&-1!==j(n.begin).match.def.indexOf("|")){var c=G(!0);if(c){var p=void 0!==c.caret?c.caret:c.pos?U(c.pos.begin?c.pos.begin:c.pos):M(-1,!0);(t!==f.DELETE||n.begin>p)&&n.begin}}!0!==a&&(i.p=t===f.DELETE?n.begin+u:n.begin)}}function ue(e,t){e.inputmask.refreshValue=!1,a.isFunction(s.onBeforeMask)&&(t=s.onBeforeMask.call(v,t,s)||t),ee(e,!0,!1,t=t.toString().split("")),d=I().join(""),(s.clearMaskOnLostFocus||s.clearIncomplete)&&e.inputmask._valueGet()===R().join("")&&-1===M()&&e.inputmask._valueSet("")}if(void 0!==t)switch(t.action){case"isComplete":return g=t.el,oe(I());case"unmaskedvalue":return void 0!==g&&void 0===t.value||(J=t.value,J=(a.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,J,s)||J).split(""),ee.call(this,void 0,!1,!1,J),a.isFunction(s.onBeforeWrite)&&s.onBeforeWrite.call(v,void 0,I(),0,s)),te(g);case"mask":!function(e){Y.off(e);var t=function(e,t){"textarea"!==e.tagName.toLowerCase()&&t.ignorables.push(f.ENTER);var i=e.getAttribute("type"),r="input"===e.tagName.toLowerCase()&&-1!==a.inArray(i,t.supportsInputType)||e.isContentEditable||"textarea"===e.tagName.toLowerCase();if(!r)if("input"===e.tagName.toLowerCase()){var s=o.createElement("input");s.setAttribute("type",i),r="text"===s.type,s=null}else r="partial";return!1!==r?function(e){var i,r;function s(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==M()||!0!==t.nullable?(this.inputmask.shadowRoot||o.activeElement)===this&&t.clearMaskOnLostFocus?(k?re(I().slice()).reverse():re(I().slice())).join(""):i.call(this):"":i.call(this)}function u(e){r.call(this,e),this.inputmask&&ue(this,e)}if(!e.inputmask.__valueGet){if(!0!==t.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===n("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var l=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e),"value"):void 0;l&&l.get&&l.set?(i=l.get,r=l.set,Object.defineProperty(e,"value",{get:s,set:u,configurable:!0})):"input"!==e.tagName.toLowerCase()&&(i=function(){return this.textContent},r=function(e){this.textContent=e},Object.defineProperty(e,"value",{get:s,set:u,configurable:!0}))}else o.__lookupGetter__&&e.__lookupGetter__("value")&&(i=e.__lookupGetter__("value"),r=e.__lookupSetter__("value"),e.__defineGetter__("value",s),e.__defineSetter__("value",u));e.inputmask.__valueGet=i,e.inputmask.__valueSet=r}e.inputmask._valueGet=function(e){return k&&!0!==e?i.call(this.el).split("").reverse().join(""):i.call(this.el)},e.inputmask._valueSet=function(e,t){r.call(this.el,null==e?"":!0!==t&&k?e.split("").reverse().join(""):e)},void 0===i&&(i=function(){return this.value},r=function(e){this.value=e},function(e){if(a.valHooks&&(void 0===a.valHooks[e]||!0!==a.valHooks[e].inputmaskpatch)){var i=a.valHooks[e]&&a.valHooks[e].get?a.valHooks[e].get:function(e){return e.value},n=a.valHooks[e]&&a.valHooks[e].set?a.valHooks[e].set:function(e,t){return e.value=t,e};a.valHooks[e]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var n=i(e);return-1!==M(void 0,void 0,e.inputmask.maskset.validPositions)||!0!==t.nullable?n:""}return i(e)},set:function(e,t){var i=n(e,t);return e.inputmask&&ue(e,t),i},inputmaskpatch:!0}}}(e.type),function(e){Y.on(e,"mouseenter",function(){var e=this.inputmask._valueGet(!0);e!==(k?I().reverse():I()).join("")&&ue(this,e)})}(e))}}(e):e.inputmask=void 0,r}(e,s);if(!1!==t){m=a(g=e),P=g.placeholder,-1===(h=void 0!==g?g.maxLength:void 0)&&(h=void 0),"inputMode"in g&&null===g.getAttribute("inputmode")&&(g.inputMode=s.inputmode,g.setAttribute("inputmode",s.inputmode)),!0===t&&(s.showMaskOnFocus=s.showMaskOnFocus&&-1===["cc-number","cc-exp"].indexOf(g.autocomplete),p&&(s.insertModeVisual=!1),Y.on(g,"submit",X.submitEvent),Y.on(g,"reset",X.resetEvent),Y.on(g,"blur",X.blurEvent),Y.on(g,"focus",X.focusEvent),Y.on(g,"invalid",X.invalidEvent),Y.on(g,"click",X.clickEvent),Y.on(g,"mouseleave",X.mouseleaveEvent),Y.on(g,"mouseenter",X.mouseenterEvent),Y.on(g,"paste",X.pasteEvent),Y.on(g,"cut",X.cutEvent),Y.on(g,"complete",s.oncomplete),Y.on(g,"incomplete",s.onincomplete),Y.on(g,"cleared",s.oncleared),l||!0===s.inputEventOnly?g.removeAttribute("maxLength"):(Y.on(g,"keydown",X.keydownEvent),Y.on(g,"keypress",X.keypressEvent)),Y.on(g,"input",X.inputFallBackEvent),Y.on(g,"compositionend",X.compositionendEvent)),Y.on(g,"setvalue",X.setValueEvent),d=R().join("");var i=(g.inputmask.shadowRoot||o).activeElement;if(""!==g.inputmask._valueGet(!0)||!1===s.clearMaskOnLostFocus||i===g){ue(g,g.inputmask._valueGet(!0));var r=I().slice();!1===oe(r)&&s.clearIncomplete&&E(),s.clearMaskOnLostFocus&&i!==g&&(-1===M()?r=[]:re(r)),(!1===s.clearMaskOnLostFocus||s.showMaskOnFocus&&i===g||""!==g.inputmask._valueGet(!0))&&Q(g,r),i===g&&ne(g,U(M()))}}}(g);break;case"format":return J=(a.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,t.value,s)||t.value).split(""),ee.call(this,void 0,!0,!1,J),t.metadata?{value:k?I().slice().reverse().join(""):I().join(""),metadata:e.call(this,{action:"getmetadata"},i,s)}:k?I().slice().reverse().join(""):I().join("");case"isValid":t.value?(J=(a.isFunction(s.onBeforeMask)&&s.onBeforeMask.call(v,t.value,s)||t.value).split(""),ee.call(this,void 0,!0,!1,J)):t.value=k?I().slice().reverse().join(""):I().join("");for(var le=I(),ce=ae(),pe=le.length-1;ce<pe&&!q(pe);pe--);return le.splice(ce,pe+1-ce),oe(le)&&t.value===(k?I().slice().reverse().join(""):I().join(""));case"getemptymask":return R().join("");case"remove":if(g&&g.inputmask){a.data(g,"_inputmask_opts",null),m=a(g);var fe=s.autoUnmask?te(g):g.inputmask._valueGet(s.autoUnmask);fe!==R().join("")?g.inputmask._valueSet(fe,s.autoUnmask):g.inputmask._valueSet(""),Y.off(g),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(g),"value")&&g.inputmask.__valueGet&&Object.defineProperty(g,"value",{get:g.inputmask.__valueGet,set:g.inputmask.__valueSet,configurable:!0}):o.__lookupGetter__&&g.__lookupGetter__("value")&&g.inputmask.__valueGet&&(g.__defineGetter__("value",g.inputmask.__valueGet),g.__defineSetter__("value",g.inputmask.__valueSet)),g.inputmask=void 0}return g;case"getmetadata":if(a.isArray(i.metadata)){var de=w(!0,0,!1).join("");return a.each(i.metadata,function(e,t){if(t.mask===de)return de=t,!1}),de}return i.metadata}}},function(e,t,i){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=i(1),r=a.dependencyLib,o=i(0),s={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return f(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return f(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return f(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return f(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return f(Date.prototype.getHours.call(this),2)}],hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return Date.prototype.getHours}],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return f(Date.prototype.getHours.call(this),2)}],Hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return function(){return f(Date.prototype.getHours.call(this),e)}}],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return f(Date.prototype.getMinutes.call(this),2)}],s:["[1-5]?[0-9]",Date.prototype.setSeconds,"seconds",Date.prototype.getSeconds],ss:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setSeconds,"seconds",function(){return f(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return f(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return f(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},u={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function l(e){var t=new RegExp("\\d+$").exec(e[0]);if(t&&void 0!==t[0]){var i=s[e[0][0]+"x"].slice("");return i[0]=i[0](t[0]),i[3]=i[3](t[0]),i}if(s[e[0]])return s[e[0]]}function c(e){if(!e.tokenizer){var t=[],i=[];for(var n in s)if(/\.*x$/.test(n)){var a=n[0]+"\\d+";-1===i.indexOf(a)&&i.push(a)}else-1===t.indexOf(n[0])&&t.push(n[0]);e.tokenizer="("+(0<i.length?i.join("|")+"|":"")+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function p(e,t,i,n){var r,o,s="";for(c(i).lastIndex=0;r=c(i).exec(e);)if(void 0===t)if(o=l(r))s+="("+o[0]+")";else switch(r[0]){case"[":s+="(";break;case"]":s+=")?";break;default:s+=a.escapeRegex(r[0])}else if(o=l(r))if(!0!==n&&o[3]){s+=o[3].call(t.date)}else o[2]?s+=t["raw"+o[2]]:s+=r[0];else s+=r[0];return s}function f(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function d(e,t,i){var a,r,o,u={date:new Date(1,0,1)},l=e;function p(e,t,i){e[a]=function(e){return e.replace(/[^0-9]/g,"0")}(t),e["raw"+a]=t,void 0!==o&&o.call(e.date,"month"==a?parseInt(e[a])-1:e[a])}if("string"==typeof l){for(c(i).lastIndex=0;r=c(i).exec(t);){var f=l.slice(0,r[0].length);s.hasOwnProperty(r[0])&&(a=s[r[0]][2],o=s[r[0]][1],p(u,f)),l=l.slice(f.length)}return u}if(l&&"object"===n(l)&&l.hasOwnProperty("date"))return l}function m(e,t){var i,n="";for(c(t).lastIndex=0;i=c(t).exec(t.inputFormat);)"d"===i[0].charAt(0)?n+=f(e.getDate(),i[0].length):"m"===i[0].charAt(0)?n+=f(e.getMonth()+1,i[0].length):"yyyy"===i[0]?n+=e.getFullYear().toString():"y"===i[0].charAt(0)&&(n+=f(e.getYear(),i[0].length));return n}function h(e,t){var i,n,a=0,r=0;for(c(t).lastIndex=0;n=c(t).exec(t.inputFormat);){var o=new RegExp("\\d+$").exec(n[0]);if(e<=(a+=r=o?parseInt(o[0]):n[0].length)){i=n,n=c(t).exec(t.inputFormat);break}}return{targetMatchIndex:a-r,nextMatch:n,targetMatch:i}}a.extendAliases({datetime:{mask:function(e){return e.numericInput=!1,s.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=u[e.inputFormat]||e.inputFormat,e.displayFormat=u[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=u[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[[\]]/,""),e.regex=p(e.inputFormat,void 0,e),e.min=d(e.min,e.inputFormat,e),e.max=d(e.max,e.inputFormat,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,skipOptionalPartCharacter:"",i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},preValidation:function(e,t,i,n,a,r,o,u){if(u)return!0;if(isNaN(i)&&e[t]!==i){var l=h(t,a);if(l.nextMatch&&l.nextMatch[0]===i&&1<l.targetMatch[0].length){var c=s[l.targetMatch[0]][0];if(new RegExp(c).test("0"+e[t-1]))return e[t]=e[t-1],e[t-1]="0",{fuzzy:!0,buffer:e,refreshFromBuffer:{start:t-1,end:t+1},pos:t+1}}}return!0},postValidation:function(e,t,i,n,a,r,o){if(o)return!0;var u,l;if(!1===n)return(u=h(t+1,a)).targetMatch&&u.targetMatchIndex===t&&1<u.targetMatch[0].length&&void 0!==s[u.targetMatch[0]]&&(l=s[u.targetMatch[0]][0],new RegExp(l).test("0"+i))?{insert:[{pos:t,c:"0"},{pos:t+1,c:i}],pos:t+1}:n;if(n.fuzzy&&(e=n.buffer,t=n.pos),(u=h(t,a)).targetMatch&&u.targetMatch[0]&&void 0!==s[u.targetMatch[0]]){l=s[u.targetMatch[0]][0];var c=e.slice(u.targetMatchIndex,u.targetMatchIndex+u.targetMatch[0].length);!1===new RegExp(l).test(c.join(""))&&2===u.targetMatch[0].length&&r.validPositions[u.targetMatchIndex]&&r.validPositions[u.targetMatchIndex+1]&&(r.validPositions[u.targetMatchIndex+1].input="0")}var f=n,m=d(e.join(""),a.inputFormat,a);return f&&m.date.getTime()==m.date.getTime()&&(f=(f=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(m,f))&&function(e,t){var i=!0;if(t.min){if(e.rawyear){var n=e.rawyear.replace(/[^0-9]/g,"");i=t.min.year.substr(0,n.length)<=n}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(i=t.min.date.getTime()<=e.date.getTime())}return i&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(i=t.max.date.getTime()>=e.date.getTime()),i}(m,a)),t&&f&&n.pos!==t?{buffer:p(a.inputFormat,m,a).split(""),refreshFromBuffer:{start:t,end:n.pos}}:f},onKeyDown:function(e,t,i,n){e.ctrlKey&&e.keyCode===o.RIGHT&&(this.inputmask._valueSet(m(new Date,n)),r(this).trigger("setvalue"))},onUnMask:function(e,t,i){return t?p(i.outputFormat,d(e,i.inputFormat,i),i,!0):t},casing:function(e,t,i,n){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},onBeforeMask:function(e,t){return"[object Date]"===Object.prototype.toString.call(e)&&(e=m(e,t)),e},insertMode:!1,shiftPositions:!1,keepStatic:!1,inputmode:"numeric"}}),e.exports=a},function(e,t,i){"use strict";var n=i(1),a=n.dependencyLib,r=i(0);function o(e,t){for(var i="",a=0;a<e.length;a++)n.prototype.definitions[e.charAt(a)]||t.definitions[e.charAt(a)]||t.optionalmarker[0]===e.charAt(a)||t.optionalmarker[1]===e.charAt(a)||t.quantifiermarker[0]===e.charAt(a)||t.quantifiermarker[1]===e.charAt(a)||t.groupmarker[0]===e.charAt(a)||t.groupmarker[1]===e.charAt(a)||t.alternatormarker===e.charAt(a)?i+="\\"+e.charAt(a):i+=e.charAt(a);return i}function s(e,t,i,n){if(0<e.length&&0<t&&(!i.digitsOptional||n)){var r=a.inArray(i.radixPoint,e);-1===r&&(e.push(i.radixPoint),r=e.length-1);for(var o=1;o<=t;o++)isFinite(e[r+o])||(e[r+o]="0")}return e}function u(e,t){var i=0;if("+"===e){for(i in t.validPositions);i=parseInt(i)}for(var n in t.tests)if(i<=(n=parseInt(n)))for(var a=0,r=t.tests[n].length;a<r;a++)if((void 0===t.validPositions[n]||"-"===e)&&t.tests[n][a].match.def===e)return n+(void 0!==t.validPositions[n]&&"-"!==e?1:0);return i}function l(e,t){var i=-1;return a.each(t.validPositions,function(t,n){if(n&&n.match.def===e)return i=parseInt(t),!1}),i}function c(e,t,i,n,a){var r=t.buffer?t.buffer.indexOf(a.radixPoint):-1,o=-1!==r&&new RegExp("[0-9１-９]").test(e);return a._radixDance&&o&&null==t.validPositions[r]?{insert:{pos:r===i?r+1:r,c:a.radixPoint},pos:i}:o}n.extendAliases({numeric:{mask:function(e){e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),1<e.placeholder.length&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&(e.positionCaretOnClick="lvp");var t="0",i=e.radixPoint;!0===e.numericInput&&void 0===e.__financeInput?(t="1",e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e._radixDance=!1,i=","===e.radixPoint?"?":"!",""!==e.radixPoint&&void 0===e.definitions[i]&&(e.definitions[i]={},e.definitions[i].validator="["+e.radixPoint+"]",e.definitions[i].placeholder=e.radixPoint,e.definitions[i].static=!0,e.definitions[i].generated=!0)):(e.__financeInput=!1,e.numericInput=!0);var a,r="[+]";if(r+=o(e.prefix,e),""!==e.groupSeparator?(void 0===e.definitions[e.groupSeparator]&&(e.definitions[e.groupSeparator]={},e.definitions[e.groupSeparator].validator="["+e.groupSeparator+"]",e.definitions[e.groupSeparator].placeholder=e.groupSeparator,e.definitions[e.groupSeparator].static=!0,e.definitions[e.groupSeparator].generated=!0),r+=e._mask(e)):r+="9{+}",void 0!==e.digits&&0!==e.digits){var s=e.digits.toString().split(",");isFinite(s[0])&&s[1]&&isFinite(s[1])?r+=i+t+"{"+e.digits+"}":(isNaN(e.digits)||0<parseInt(e.digits))&&(e.digitsOptional?(a=r+i+t+"{0,"+e.digits+"}",e.keepStatic=!0):r+=i+t+"{"+e.digits+"}")}return r+=o(e.suffix,e),r+="[-]",a&&(r=[a+o(e.suffix,e)+"[-]",r]),e.greedy=!1,function(e){void 0===e.parseMinMaxOptions&&(null!==e.min&&(e.min=e.min.toString().replace(new RegExp(n.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,".")),e.min=isFinite(e.min)?parseFloat(e.min):NaN,isNaN(e.min)&&(e.min=Number.MIN_VALUE)),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(n.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,".")),e.max=isFinite(e.max)?parseFloat(e.max):NaN,isNaN(e.max)&&(e.max=Number.MAX_VALUE)),e.parseMinMaxOptions="done")}(e),r},_mask:function(e){return"("+e.groupSeparator+"999){+|1}"},digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",_radixDance:!0,groupSeparator:"",allowMinus:!0,negationSymbol:{front:"-",back:""},prefix:"",suffix:"",min:null,max:null,step:1,unmaskAsNumber:!1,roundingFN:Math.round,inputmode:"numeric",shortcuts:{k:"000",m:"000000"},placeholder:"0",greedy:!1,rightAlign:!0,insertMode:!0,autoUnmask:!1,skipOptionalPartCharacter:"",definitions:{0:{validator:c},1:{validator:c,definitionSymbol:"9"},"+":{validator:function(e,t,i,n,a){return a.allowMinus&&("-"===e||e===a.negationSymbol.front)}},"-":{validator:function(e,t,i,n,a){return a.allowMinus&&e===a.negationSymbol.back}}},preValidation:function(e,t,i,n,r,o,s,c){if(!1!==r.__financeInput&&i===r.radixPoint)return!1;var p;if(p=r.shortcuts&&r.shortcuts[i]){if(1<p.length)for(var f=[],d=0;d<p.length;d++)f.push({pos:t+d,c:p[d],strict:!1});return{insert:f}}var m=a.inArray(r.radixPoint,e),h=t;if(t=function(e,t,i,n,a){return a._radixDance&&a.numericInput&&t!==a.negationSymbol.back&&e<=i&&(0<i||t==a.radixPoint)&&(void 0===n.validPositions[e-1]||n.validPositions[e-1].input!==a.negationSymbol.back)&&(e-=1),e}(t,i,m,o,r),"-"===i||i===r.negationSymbol.front){if(!0!==r.allowMinus)return!1;var v=!1,g=l("+",o),k=l("-",o);return-1!==g&&(v=[g,k]),!1!==v?{remove:v,caret:h}:{insert:[{pos:u("+",o),c:r.negationSymbol.front,fromIsValid:!0},{pos:u("-",o),c:r.negationSymbol.back,fromIsValid:void 0}],caret:h+r.negationSymbol.back.length}}if(c)return!0;if(-1!==m&&!0===r._radixDance&&!1===n&&i===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||0<parseInt(r.digits))&&m!==t)return{caret:r._radixDance&&t===m-1?m+1:m};if(!1===r.__financeInput)if(n){if(r.digitsOptional)return{rewritePosition:s.end};if(!r.digitsOptional){if(s.begin>m&&s.end<=m)return i===r.radixPoint?{insert:{pos:m+1,c:"0",fromIsValid:!0},rewritePosition:m}:{rewritePosition:m+1};if(s.begin<m)return{rewritePosition:s.begin-1}}}else if(!r.showMaskOnHover&&!r.showMaskOnFocus&&!r.digitsOptional&&0<r.digits&&""===this.inputmask.__valueGet.call(this))return{rewritePosition:m};return{rewritePosition:t}},postValidation:function(e,t,i,n,r,o,s){if(!1===n)return n;if(s)return!0;if(null!==r.min||null!==r.max){var u=r.onUnMask(e.slice().reverse().join(""),void 0,a.extend({},r,{unmaskAsNumber:!0}));if(null!==r.min&&u<r.min&&(u.toString().length>=r.min.toString().length||u<0))return!1;if(null!==r.max&&u>r.max)return!1}return n},onUnMask:function(e,t,i){if(""===t&&!0===i.nullable)return t;var a=e.replace(i.prefix,"");return a=(a=a.replace(i.suffix,"")).replace(new RegExp(n.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(a=a.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==a.indexOf(i.radixPoint)&&(a=a.replace(n.escapeRegex.call(this,i.radixPoint),".")),a=(a=a.replace(new RegExp("^"+n.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(n.escapeRegex(i.negationSymbol.back)+"$"),""),Number(a)):a},isComplete:function(e,t){var i=(t.numericInput?e.slice().reverse():e).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+n.escapeRegex(t.negationSymbol.front)),"-")).replace(new RegExp(n.escapeRegex(t.negationSymbol.back)+"$"),"")).replace(t.prefix,"")).replace(t.suffix,"")).replace(new RegExp(n.escapeRegex(t.groupSeparator)+"([0-9]{3})","g"),"$1"),","===t.radixPoint&&(i=i.replace(n.escapeRegex(t.radixPoint),".")),isFinite(i)},onBeforeMask:function(e,t){var i=t.radixPoint||",";isFinite(t.digits)&&(t.digits=parseInt(t.digits)),"number"!=typeof e&&"number"!==t.inputType||""===i||(e=e.toString().replace(".",i));var a=e.split(i),r=a[0].replace(/[^\-0-9]/g,""),o=1<a.length?a[1].replace(/[^0-9]/g,""):"",u=1<a.length;e=r+(""!==o?i+o:o);var l=0;if(""!==i&&(l=t.digitsOptional?t.digits<o.length?t.digits:o.length:t.digits,""!==o||!t.digitsOptional)){var c=Math.pow(10,l||1);e=e.replace(n.escapeRegex(i),"."),isNaN(parseFloat(e))||(e=(t.roundingFN(parseFloat(e)*c)/c).toFixed(l)),e=e.toString().replace(".",i)}if(0===t.digits&&-1!==e.indexOf(i)&&(e=e.substring(0,e.indexOf(i))),null!==t.min||null!==t.max){var p=e.toString().replace(i,".");null!==t.min&&p<t.min?e=t.min.toString().replace(".",i):null!==t.max&&p>t.max&&(e=t.max.toString().replace(".",i))}return s(e.toString().split(""),l,t,u).join("")},onBeforeWrite:function(e,t,i,r){function o(e,t){if(!1!==r.__financeInput||t){var i=a.inArray(r.radixPoint,e);-1!==i&&e.splice(i,1)}if(""!==r.groupSeparator)for(;-1!==(i=e.indexOf(r.groupSeparator));)e.splice(i,1);return e}var u,l=function(e,t){var i=new RegExp("(^"+(""!==t.negationSymbol.front?n.escapeRegex(t.negationSymbol.front)+"?":"")+n.escapeRegex(t.prefix)+")(.*)("+n.escapeRegex(t.suffix)+(""!=t.negationSymbol.back?n.escapeRegex(t.negationSymbol.back)+"?":"")+"$)").exec(e.slice().reverse().join("")),a=i?i[2]:"",r=!1;return a&&(a=a.split(t.radixPoint.charAt(0))[0],r=new RegExp("^[0"+t.groupSeparator+"]*").exec(a)),!(!r||!(1<r[0].length||0<r[0].length&&r[0].length<a.length))&&r}(t,r);if(l){var c=t.slice().reverse(),p=c.join("").indexOf(l[0]);c.splice(p,l[0].length);var f=c.length-p;o(c),u={refreshFromBuffer:!0,buffer:c.reverse(),caret:i<f?i:f}}if(e)switch(e.type){case"blur":case"checkval":if(null!==r.min){var d=r.onUnMask(t.slice().reverse().join(""),void 0,a.extend({},r,{unmaskAsNumber:!0}));if(null!==r.min&&d<r.min)return{refreshFromBuffer:!0,buffer:s(r.min.toString().replace(".",r.radixPoint).split(""),r.digits,r).reverse()}}if(t[t.length-1]===r.negationSymbol.front){var m=new RegExp("(^"+(""!=r.negationSymbol.front?n.escapeRegex(r.negationSymbol.front)+"?":"")+n.escapeRegex(r.prefix)+")(.*)("+n.escapeRegex(r.suffix)+(""!=r.negationSymbol.back?n.escapeRegex(r.negationSymbol.back)+"?":"")+"$)").exec(o(t.slice(),!0).reverse().join(""));0==(m?m[2]:"")&&(u={refreshFromBuffer:!0,buffer:[0]})}else""!==r.radixPoint&&t[0]===r.radixPoint&&(u&&u.buffer?u.buffer.shift():(t.shift(),u={refreshFromBuffer:!0,buffer:o(t)}));if(r.enforceDigitsOnBlur){var h=(u=u||{})&&u.buffer||t.slice().reverse();u.refreshFromBuffer=!0,u.buffer=s(h,r.digits,r,!0).reverse()}}return u},onKeyDown:function(e,t,i,n){var o,u=a(this);if(e.ctrlKey)switch(e.keyCode){case r.UP:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())+parseInt(n.step)),u.trigger("setvalue"),!1;case r.DOWN:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())-parseInt(n.step)),u.trigger("setvalue"),!1}if(!e.shiftKey&&(e.keyCode===r.DELETE||e.keyCode===r.BACKSPACE||e.keyCode===r.BACKSPACE_SAFARI)&&i.begin!==t.length){if(t[e.keyCode===r.DELETE?i.begin-1:i.end]===n.negationSymbol.front)return o=t.slice().reverse(),""!==n.negationSymbol.front&&o.shift(),""!==n.negationSymbol.back&&o.pop(),u.trigger("setvalue",[o.join(""),i.begin]),!1;if(!0===n._radixDance){var l=a.inArray(n.radixPoint,t);if(n.digitsOptional){if(0===l)return(o=t.slice().reverse()).pop(),u.trigger("setvalue",[o.join(""),i.begin>=o.length?o.length:i.begin]),!1}else if(-1!==l&&(i.begin<l||i.end<l||e.keyCode===r.DELETE&&i.begin===l))return i.begin!==i.end||e.keyCode!==r.BACKSPACE&&e.keyCode!==r.BACKSPACE_SAFARI||i.begin++,(o=t.slice().reverse()).splice(o.length-i.begin,i.begin-i.end+1),o=s(o,n.digits,n).join(""),u.trigger("setvalue",[o,i.begin>=o.length?l+1:i.begin]),!1}}}},currency:{prefix:"",groupSeparator:",",alias:"numeric",digits:2,digitsOptional:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0},percentage:{alias:"numeric",min:0,max:100,suffix:" %",digits:0,allowMinus:!1},indianns:{alias:"numeric",_mask:function(e){return"("+e.groupSeparator+"99){*|1}("+e.groupSeparator+"999){1|1}"},groupSeparator:",",radixPoint:".",placeholder:"0",digits:2,digitsOptional:!1}}),e.exports=n},function(e,t,i){"use strict";var n,a=(n=i(1))&&n.__esModule?n:{default:n};function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){var t="function"==typeof Map?new Map:void 0;return(s=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return u(e,arguments,c(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),l(n,e)})(e)}function u(e,t,i){return(u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,i){var n=[null];n.push.apply(n,t);var a=new(Function.bind.apply(e,n));return i&&l(a,i.prototype),a}).apply(null,arguments)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}if(document.head.createShadowRoot||document.head.attachShadow){var p=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=(e=o(this,c(t).call(this))).getAttributeNames(),n=e.attachShadow({mode:"closed"}),r=document.createElement("input");for(var s in r.type="text",n.appendChild(r),i)Object.prototype.hasOwnProperty.call(i,s)&&r.setAttribute("data-inputmask-"+i[s],e.getAttribute(i[s]));return(new a.default).mask(r),r.inputmask.shadowRoot=n,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,s(HTMLElement)),t}();customElements.define("input-mask",p)}},function(e,t,i){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=i(3),r=i(1);void 0===a.fn.inputmask&&(a.fn.inputmask=function(e,t){var i,o=this[0];if(void 0===t&&(t={}),"string"==typeof e)switch(e){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():a(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":r.setValue(o,t);break;case"option":if("string"!=typeof t)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(t)});if(o&&void 0!==o.inputmask)return o.inputmask.option(t);break;default:return t.alias=e,i=new r(t),this.each(function(){i.mask(this)})}else{if(Array.isArray(e))return t.alias=e,i=new r(t),this.each(function(){i.mask(this)});if("object"==n(e))return i=new r(e),void 0===e.mask&&void 0===e.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(e);i.mask(this)}):this.each(function(){i.mask(this)});if(void 0===e)return this.each(function(){(i=new r(t)).mask(this)})}})},function(e,t,i){"use strict";var n=i(6),a=i(3);n.dependencyLib===a&&i(12),e.exports=n}],installedModules={},__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(e,t,i){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(__webpack_require__.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)__webpack_require__.d(i,n,function(t){return e[t]}.bind(null,n));return i},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=13);function __webpack_require__(e){if(installedModules[e])return installedModules[e].exports;var t=installedModules[e]={i:e,l:!1,exports:{}};return modules[e].call(t.exports,t,t.exports,__webpack_require__),t.l=!0,t.exports}var modules,installedModules});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
